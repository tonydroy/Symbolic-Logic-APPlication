package slapp.editor.derivation.der_systems;

import com.gluonhq.richtextarea.RichTextArea;
import com.gluonhq.richtextarea.model.Document;
import javafx.event.ActionEvent;
import javafx.scene.text.Text;
import javafx.util.Pair;
import slapp.editor.decorated_rta.BoxedDRTA;
import slapp.editor.derivation.DerivationCheck;
import slapp.editor.derivation.ViewLine;
import slapp.editor.parser.MatchUtilities;
import slapp.editor.parser.ParseUtilities;
import slapp.editor.parser.TextMessageException;

import java.util.Collections;
import java.util.List;

public class AsspExisExploitG extends DerivationRule {

    public AsspExisExploitG(String name, String rgexTemplate) {
        super(name, rgexTemplate);
        this.premAssp = true;
    }

    public Pair<Boolean, List<Text>> applies(DerivationCheck checker, ViewLine line, String... inputs) {

        ViewLine bottomLine = checker.lastLineAtScope(line);

        BoxedDRTA bottomDRTA = bottomLine.getLineContentBoxedDRTA();
        RichTextArea bottomRTA = bottomDRTA.getRTA();
        bottomRTA.getActionFactory().saveNow().execute(new ActionEvent());
        Document bottomLineDoc = bottomRTA.getDocument();

        if (bottomLineDoc.getText().equals("")) {
            String bottomLineLabel = bottomLine.getLineNumberLabel().getText();
            return new Pair<>(false, Collections.singletonList(ParseUtilities.newRegularText("Exit strategy is not complete without statement of the goal formula at the bottom of the scope line (" + bottomLineLabel + ").")));
        }

        Document bottomForm1 = new Document("\u22a5");
        Document bottomForm2 = new Document("\ud835\udcac \u2227 \u223c\ud835\udcac");

        // check for contradiction
        MatchUtilities.clearFormMatch();
        boolean resultGood1 = false;
        boolean resultGood2 = false;
        try {
            Pair<Boolean, Boolean> bottomMatch1 = MatchUtilities.simpleFormMatch(bottomForm1, bottomLineDoc, checker.getDerivationRuleset().getObjectLanguage().getNameString(), checker.getDerivationRuleset().getMetaLanguage().getNameString());
            resultGood1 = true;
        } catch (TextMessageException e) {
        }

        try {
            Pair<Boolean, Boolean> bottomMatch2 = MatchUtilities.simpleFormMatch(bottomForm2, bottomLineDoc, checker.getDerivationRuleset().getObjectLanguage().getNameString(), checker.getDerivationRuleset().getMetaLanguage().getNameString());
            resultGood2 = true;
        } catch (TextMessageException e) {
        }

        if (resultGood1 || resultGood2) {
            return new Pair(false, Collections.singletonList(ParseUtilities.newRegularText("It looks like your exit strategy should have been \ud835\udc50 rather than \ud835\udc54.")));
        }


        return new Pair(true, null);


    }


}
