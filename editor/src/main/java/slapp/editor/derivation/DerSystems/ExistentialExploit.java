package slapp.editor.derivation.DerSystems;

import com.gluonhq.richtextarea.RichTextArea;
import com.gluonhq.richtextarea.model.Document;
import javafx.event.ActionEvent;
import javafx.scene.text.Text;
import javafx.scene.text.TextFlow;
import javafx.util.Pair;
import slapp.editor.decorated_rta.BoxedDRTA;
import slapp.editor.derivation.DerivationCheck;
import slapp.editor.derivation.ViewLine;
import slapp.editor.parser.*;
import slapp.editor.parser.grammatical_parts.Formula;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class ExistentialExploit extends DerivationRule {

    public ExistentialExploit(String name, String rgexTemplate) {
        super(name, rgexTemplate);
        this.premAssp = false;
    }

    public Pair<Boolean, List<Text>> applies(DerivationCheck checker, ViewLine line, String... inputs) {

        BoxedDRTA lineBDRTA = line.getLineContentBoxedDRTA();
        RichTextArea lineRTA = lineBDRTA.getRTA();
        lineRTA.getActionFactory().saveNow().execute(new ActionEvent());
        Document lineDoc = lineRTA.getDocument();


        ViewLine exsLine;
        Pair<ViewLine, List<Text>> exsLinePair = checker.getLineFromLabel(inputs[0]);
        if (exsLinePair.getKey() != null) exsLine = exsLinePair.getKey();
        else return new Pair(false, exsLinePair.getValue());

        BoxedDRTA exsLineBDRTA = exsLine.getLineContentBoxedDRTA();
        RichTextArea exsLineRTA = exsLineBDRTA.getRTA();
        exsLineRTA.getActionFactory().saveNow().execute(new ActionEvent());
        Document exsLineDoc = exsLineRTA.getDocument();
        if (exsLineDoc.getText().equals("")) return new Pair(false, Collections.singletonList(ParseUtilities.newRegularText("Justification cannot appeal to the empty line (" + inputs[0] + ").")));


        ViewLine topLine;
        Pair<ViewLine, List<Text>> topLinePair = checker.getLineFromLabel(inputs[1]);
        if (topLinePair.getKey() != null) topLine = topLinePair.getKey();
        else return new Pair(false, topLinePair.getValue());

        BoxedDRTA topLineBDRTA = topLine.getLineContentBoxedDRTA();
        RichTextArea topLineRTA = topLineBDRTA.getRTA();
        topLineRTA.getActionFactory().saveNow().execute(new ActionEvent());
        Document topLineDoc = topLineRTA.getDocument();
        if (topLineDoc.getText().equals("")) return new Pair(false, Collections.singletonList(ParseUtilities.newRegularText("Justification cannot appeal to the empty line (" + inputs[1] + ").")));


        ViewLine bottomLine;
        Pair<ViewLine, List<Text>> bottomLinePair = checker.getLineFromLabel(inputs[2]);
        if (bottomLinePair.getKey() != null) bottomLine = bottomLinePair.getKey();
        else return new Pair(false, bottomLinePair.getValue());

        BoxedDRTA bottomLineBDRTA = bottomLine.getLineContentBoxedDRTA();
        RichTextArea bottomLineRTA = bottomLineBDRTA.getRTA();
        bottomLineRTA.getActionFactory().saveNow().execute(new ActionEvent());
        Document bottomLineDoc = bottomLineRTA.getDocument();
        if (bottomLineDoc.getText().equals("")) return new Pair(false, Collections.singletonList(ParseUtilities.newRegularText("Justification cannot appeal to the empty line (" + inputs[2] + ").")));

        Pair<Boolean, List<Text>> exsPair = checker.lineIsAccessibleTo(exsLine, line);
        if (!exsPair.getKey()) {
            return exsPair;
        }

        Pair<Boolean, List<Text>> subderivationPair = checker.isSubderivation(inputs[1], inputs[2]);
        if (!subderivationPair.getKey()) {
            return subderivationPair;
        }

        Pair<Boolean, List<Text>> accessibilityPair = checker.isAccessibleSubderivationFor(line, inputs[1], inputs[2]);
        if (!accessibilityPair.getKey()) {
            return accessibilityPair;
        }

        Language objectLanguage = checker.getDerivationRuleset().getObjectLanguage();
        Language metaLanguage = checker.getDerivationRuleset().getMetaLanguage();

        String openBracketString = metaLanguage.getOpenBracket1();
        String closeBracketString = metaLanguage.getCloseBracket1();
        String commaDividerString = metaLanguage.getCommaDivider();

        TextFlow topJustificationFlow = topLine.getJustificationFlow();
        String justificationString = checker.getDerivationExercise().getStringFromJustificationFlow(topJustificationFlow);


        Document contForm1 = new Document("\u22a5" );
        Document contForm2 = new Document(openBracketString + "\ud835\udcac \u2227 \u223c\ud835\udcac" + closeBracketString);
        Document mainExisForm = new Document( "\u2203\ud835\udccd\ud835\udcab" );
        Document topLineForm = new Document("\ud835\udcab\u2039\ud835\udccd" + commaDividerString + "\ud835\udccb\u203a"  );
        Document outputForm = new Document("\ud835\udcaa");


        //check exit strategies
        boolean asspOK = true;
        boolean basicMatch = false;
        if (checker.getDerivationRuleset().getAsspExisExploitCRule().matches(justificationString) ||
                checker.getDerivationRuleset().getAsspExisExploitGRule().matches(justificationString)) {

            String topStr1 = checker.getDerivationExercise().getLineLabelsFromJustificationFlow(topJustificationFlow).get(0);
            if (topStr1.equals(inputs[0])) basicMatch = true;
        }

        boolean contradiction = false;
        MatchUtilities.clearFormMatch();
        try {
            Pair<Boolean, Boolean> contMatch1 = MatchUtilities.simpleFormMatch(contForm1, lineDoc, checker.getDerivationRuleset().getObjectLanguage().getNameString(), checker.getDerivationRuleset().getMetaLanguage().getNameString());
            contradiction = true;
        } catch (TextMessageException e) { }

        try {
            Pair<Boolean, Boolean> contMatch2 = MatchUtilities.simpleFormMatch(contForm2, lineDoc, checker.getDerivationRuleset().getObjectLanguage().getNameString(), checker.getDerivationRuleset().getMetaLanguage().getNameString());
            contradiction = true;
        } catch (TextMessageException e) { }


        if (contradiction) {
            DerivationRule rule = checker.getDerivationRuleset().getAsspExisExploitCRule();
            if (!rule.matches(justificationString) || !basicMatch) {
                asspOK = false;
            }
        }
        else {
            DerivationRule rule = checker.getDerivationRuleset().getAsspExisExploitGRule();
            if (!rule.matches(justificationString) || !basicMatch) {
                asspOK = false;
            }
        }

        //-----------------------




        MatchUtilities.clearFormMatch();
        boolean resultGood0 = false;
        boolean resultGood1 = false;
        boolean resultGood2 = false;

        try {
            Pair<Boolean, Boolean> mainDsjMatch = MatchUtilities.simpleFormMatch(mainExisForm, exsLineDoc, objectLanguage.getNameString(), metaLanguage.getNameString());
        }
        catch (TextMessageException e) {
            return new Pair(false, Collections.singletonList(ParseUtilities.newRegularText("Line (" + exsLine.getLineNumberLabel().getText() + ") is not of the right form for application of " + getName() + ".")));
        }

        try {
            Pair<Boolean, Boolean> outputLineMatch = MatchUtilities.simpleFormMatch(outputForm, lineDoc, objectLanguage.getNameString(), metaLanguage.getNameString());
            resultGood0 = true;
        }
        catch (TextMessageException e) { }

        try {
            Pair<Boolean, Boolean> topLineMatch = MatchUtilities.simpleFormMatch(topLineForm, topLineDoc, objectLanguage.getNameString(), metaLanguage.getNameString());
            resultGood1 = true;
        }
        catch (TextMessageException e) {
            return new Pair(false, e.getMessageList());
        }

        try {
            Pair<Boolean, Boolean> bottomLine1Match = MatchUtilities.simpleFormMatch(outputForm, bottomLineDoc, objectLanguage.getNameString(), metaLanguage.getNameString());
            resultGood2 = true;
        } catch (TextMessageException e) { }


        Expression variableExp = ((Formula) MatchUtilities.getTransformList().get(0).getKey()).getSubTransform().getExp2().getMatch();

        //check variable free in undischarged assumption
        List<String> asspList = line.getAssumptionList();
        for (String asspLabel : asspList) {
            ViewLine asspLine;
            Pair<ViewLine, List<Text>> asspLinePair = checker.getLineFromLabel(asspLabel);
            if (asspLinePair.getKey() != null) asspLine = asspLinePair.getKey();
            else return new Pair(false, asspLinePair.getValue());

            TextFlow asspJustificationFlow = asspLine.getJustificationFlow();
            String asspJustificationString = checker.getDerivationExercise().getStringFromJustificationFlow(asspJustificationFlow);
            if (!checker.getDerivationRuleset().getPremiseRule().matches(asspJustificationString)) {

                BoxedDRTA asspLineBDRTA = asspLine.getLineContentBoxedDRTA();
                RichTextArea asspLineRTA = asspLineBDRTA.getRTA();
                asspLineRTA.getActionFactory().saveNow().execute(new ActionEvent());
                Document asspLineDoc = asspLineRTA.getDocument();
                Expression asspLineExp = ParseUtilities.parseDoc(asspLineDoc, objectLanguage.getNameString()).get(0);

                if (SyntacticalFns.expTermFreeInFormula(asspLineExp, variableExp, objectLanguage.getNameString())) {
                    List<Text> list = new ArrayList<>();
                    list.add(new Text("Variable "));
                    list.addAll(variableExp.toTextList());
                    list.add(new Text(" is free in an undischarged assumption."));
                    return new Pair(false, list);
                }
            }
        }

        //check variable free in existential
        Expression exsExp = ParseUtilities.parseDoc(exsLineDoc, objectLanguage.getNameString()).get(0);
        if (SyntacticalFns.expTermFreeInFormula(exsExp, variableExp, objectLanguage.getNameString())) {
            List<Text> list = new ArrayList<>();
            list.add(new Text("Variable "));
            list.addAll(variableExp.toTextList());
            list.add(new Text(" is free in "));
            list.addAll(exsExp.toTextList());
            return new Pair(false, list);
        }

        //check variable free in goal
        Expression lineExp = ParseUtilities.parseDoc(lineDoc, objectLanguage.getNameString()).get(0);
        if (SyntacticalFns.expTermFreeInFormula(lineExp, variableExp, objectLanguage.getNameString())) {
            List<Text> list = new ArrayList<>();
            list.add(new Text("Variable "));
            list.addAll(variableExp.toTextList());
            list.add(new Text(" is free in "));
            list.addAll(lineExp.toTextList());
            return new Pair(false, list);
        }



        if (resultGood0 && resultGood1 && resultGood2 && asspOK) {
            return new Pair(true, null);
        }

        if (asspOK) {
            return new Pair(false, Collections.singletonList(ParseUtilities.newRegularText("Line (" + line.getLineNumberLabel().getText() + ") requires an existential and a subderivation of the correct form and ending with the goal.")));
        }
        else {
            return new Pair(false, Collections.singletonList(ParseUtilities.newRegularText("To use these subderivations by " + getName() +" both exit strategies should be (\ud835\udc54, " + inputs[0] + getName() + ").")));

        }

    }


}
